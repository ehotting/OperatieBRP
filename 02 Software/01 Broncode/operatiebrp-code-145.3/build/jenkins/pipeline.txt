node('migr') {
  stage('Checkout') {
    // Get the code
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: 'master']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '41a3ccc6-713d-4688-824d-b948355d06da', url: 'ssh://fac-git.modernodam.nl/operatiebrp-code.git']]])

    // Get the Maven tool.
    mvnHome = tool name: 'Maven3.3.9', type: 'maven'
    mvnRepo = pwd() + '/../../maven-repositories/' + env.EXECUTOR_NUMBER + '/'
    mvnCommand = '\'' + mvnHome + '/bin/mvn\' -D\'maven.repo.local=' + mvnRepo + '\' --batch-mode --errors'
  }

  // Start tracking concurrent builds
  milestone label: 'Checkout', ordinal: 1

  lock(inversePrecedence: true, resource: 'fac-ci-dok-01.modernodam.nl') {
    stage('Build') {
      // Clean up docker containers
      try {
        sh "docker rm -vf \$(docker ps -a -q) || true"
      } catch(err) {
        // Ignore
      }

      // Clean up docker images (remove only dangling so next build can reuse the layers)
      try {
        sh "docker rmi -f \$(docker images -q) || true"
      } catch(err) {
        // Ignore
      }

      // Clean jacoco coverage files
      sh "${mvnCommand} -pl :jacoco-clean clean:clean"

      // May run a maximum of 1 hour
      timeout(time: 1, unit: 'HOURS') {
        sh "${mvnCommand} clean deploy -DskipTests -Pdocker,docker-deploy -Ddocker.registry=" + env.DOCKER_REGISTRY + " -Ddocker.image.version=master-" + env.BUILD_NUMBER + " -T4"
      }

      // Trigger jobs
      build job: 'BRP API TEST', wait: false
      build job: 'BRP API-Regressie Conversielevering', wait: false
      build job: 'BRP E2E', wait: false
      //build job: 'BRP-E2E-Regressie-Multijob', wait: false
    }

    // Cancel all older builds that have not reached this step (and are probably waiting for the lock)
    milestone label: 'Build', ordinal: 10
  }

  stage('Test') {
    // May run a maximum of 2 hours
    timeout(time: 2, unit: 'HOURS') {
      // Execute tests
      parallel failFast: false,
        algemeenBranch: {
          sh "${mvnCommand} -Dmaven.test.failure.ignore verify -P!modules-brp,!modules-build,!modules-deployment,!modules-distributie,!modules-migratie,coverage"
        },
        brpBranch: {
          sh "${mvnCommand} -Dmaven.test.failure.ignore verify -P!modules-algemeen,!modules-build,!modules-deployment,!modules-distributie,!modules-migratie,coverage,inmemory"
        },
        deploymentBranch: {
          sh "${mvnCommand} -Dmaven.test.failure.ignore verify -P!modules-algemeen,!modules-brp,!modules-build,!modules-distributie,!modules-migratie,coverage"
        },
        distributieBranch: {
          sh "${mvnCommand} -Dmaven.test.failure.ignore verify -P!modules-algemeen,!modules-brp,!modules-build,!modules-deployment,!modules-migratie,coverage"
        },
        migratieBranch: {
          sh "${mvnCommand} -Dmaven.test.failure.ignore verify -P!modules-algemeen,!modules-brp,!modules-build,!modules-deployment,!modules-distributie,coverage"
        }
      //sh "${mvnCommand} -Dmaven.test.failure.ignore verify -Pcoverage,inmemory,dataaccess-postgres"
    }
  
    // Collect jUnit reports
    junit '**/target/surefire-reports/*.xml,**/target/failsafe-reports/*.xml'
  }

  lock(inversePrecedence: true, resource: 'operatie-brp-regressie') {
    stage('Regressie') {
      // May run a maximum of 1 hour
      timeout(time: 1, unit: 'HOURS') {
        // Execute regression tests
        parallel failFast: false,
          afnemersindicatieBranch: {
            echo 'Regressietest afnemersindicatie (voor coverage in SonarQube)'
            sh "${mvnCommand} -Dmaven.test.failure.ignore verify -Pregressie-coverage,coverage,inmemory -pl :migr-test-afnemersindicatie"
          },
          autorisatieBranch: {
            echo 'Regressietest autorisatie (voor coverage in SonarQube)'
            sh "${mvnCommand} -Dmaven.test.failure.ignore verify -Pregressie,coverage,inmemory -pl :migr-test-autorisatie"
          },
          persoonDatabaseBranch: {
            echo 'Regressietest persoon-database (voor coverage in SonarQube)'
            sh "${mvnCommand} -Dmaven.test.failure.ignore verify -Pregressie,coverage,inmemory -pl :migr-test-persoon-database"
          },
          persoonNaarBrpBranch: {
            echo 'Regressietest persoon-naarbrp (voor coverage in SonarQube)'
            sh "${mvnCommand} -Dmaven.test.failure.ignore verify -Pregressie-coverage,coverage,inmemory -pl :migr-test-persoon-naarbrp"
          },
          persoonPreconditieBranch: {
            echo 'Regressietest persoon-precondities (voor coverage in SonarQube)'
            sh "${mvnCommand} -Dmaven.test.failure.ignore verify -Pregressie-coverage,coverage,inmemory -pl :migr-test-persoon-preconditie"
          }
      }
    }

    // Cancel all older builds that have not reached this step (and are probably waiting for the lock)
    milestone label: 'Regressie', ordinal: 30
  }
  
  lock(inversePrecedence: true, resource: 'operatie-brp-qa') {
    stage('QA') {
      // May run a maximum of 45 minutes
      timeout(time: 45, unit: 'MINUTES') {
        // Merge jacoco coverage files
        sh "${mvnCommand} -f build/jacoco/merge.pom.xml -Pcoverage jacoco:merge"
          
        // Analyze the project with SonarQube
        withEnv(['MAVEN_OPTS=-Xms2g -Xmx12g -XX:MaxHeapSize=12g']) {
          sh "${mvnCommand} -P!modules-tooling sonar:sonar -Dsonar.host.url=http://fac-sonar.modernodam.nl:9000/sonarQube/ -Dsonar.login=83f44e2ae4eefddeedbf806c7816a59a9b437893"
        }
      }
    }

    // Cancel all older builds that have not reached this step (and are probably waiting for the lock)
    milestone label: 'QA', ordinal: 40
  }
}
