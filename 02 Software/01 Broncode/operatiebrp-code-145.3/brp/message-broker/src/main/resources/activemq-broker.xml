<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- This creates an embedded ActiveMQ Broker -->
    <amq:broker id="brpMessageBrokert"
                brokerId="brpMessageBroker"
                brokerName="BrpMessageBroker"
                useShutdownHook="true"
                useJmx="true"
                persistent="true"
                dataDirectory="${berichtencentrale.data.directory}"
                schedulerSupport="true"
                schedulerDirectory="${berichtencentrale.scheduler.directory}"
                enableStatistics="true"
                networkConnectorStartAsync="true"
                startAsync="true"
                dedicatedTaskRunner="false"
                advisorySupport="false"
    >
        <amq:transportConnectors>
            <amq:transportConnector uri="${brp.jms.broker.url}"/>
        </amq:transportConnectors>

        <amq:persistenceAdapter>
            <!-- KahaDB per destination; each queue/topic has it's own store -->
            <amq:mKahaDB directory="${berichtencentrale.kahadb.directory}">
                <amq:filteredPersistenceAdapters>
                    <amq:filteredKahaDB perDestination="true">
                        <amq:persistenceAdapter>
                            <amq:kahaDB preallocationStrategy="zeros" journalMaxFileLength="4 mb" />
                        </amq:persistenceAdapter>
                    </amq:filteredKahaDB>
                </amq:filteredPersistenceAdapters>
            </amq:mKahaDB>
        </amq:persistenceAdapter>

        <amq:destinationPolicy>
            <amq:policyMap>
                <amq:policyEntries>
                    <amq:policyEntry queue=">" producerFlowControl="false" memoryLimit="2mb">
						<amq:pendingQueuePolicy>
                          <amq:storeCursor/>
                        </amq:pendingQueuePolicy>
                        <amq:deadLetterStrategy>
                            <!-- DLQ is noodzakelijk voor GBA componenten -->
                            <amq:individualDeadLetterStrategy queuePrefix="DLQ." queueSuffix="" useQueueForQueueMessages="true" />
                        </amq:deadLetterStrategy>
                    </amq:policyEntry>

                    <amq:policyEntry queue="SelectieTaakQueue" producerFlowControl="false" memoryLimit="256mb" maxPageSize="500">
                    </amq:policyEntry>
                    <amq:policyEntry queue="SelectieTaakResultaatQueue" producerFlowControl="false" memoryLimit="100mb" maxPageSize="500">
                    </amq:policyEntry>
                    <amq:policyEntry queue="SelectieSchrijfTaakQueue" producerFlowControl="false" memoryLimit="100mb" maxPageSize="500">
                    </amq:policyEntry>
                    <amq:policyEntry queue="VerzendingAfnemerQueue"  producerFlowControl="false" maxPageSize="500">
                        <!--
                            Geen producerflow voor deze queue.
                            Mutatielevering, OnderhoudAfnemerindicatie etc worden zodoende niet geremd
                            in het plaatsen van berichten op deze queue indien Verzending het niet
                            bij kan benen.
                            In het extreme geval dat de persistent message store vol raakt worden
                            de producers wel vertraagd.
                        -->
                        <amq:deadLetterStrategy>
                            <amq:discarding/>
                        </amq:deadLetterStrategy>
                    </amq:policyEntry>
                </amq:policyEntries>
            </amq:policyMap>
        </amq:destinationPolicy>

        <amq:managementContext>
            <amq:managementContext
                    jmxDomainName="nl.bzk.brp"
                    brokerName="BrpMessageBroker"
                    id="brpMessageBroker"
                    createMBeanServer="false"
                    createConnector="false"  />
        </amq:managementContext>

        <amq:systemUsage>
            <amq:systemUsage>
                <amq:memoryUsage>
                    <!-- MemoryUsage is the maximum amount of memory the broker will use -->
                     <!--70 is default-->
                    <amq:memoryUsage percentOfJvmHeap="70"/>
                </amq:memoryUsage>
                <amq:storeUsage>
                    <!-- Store usage controls the maximum size of the AMQMessage Store-->
                    <!-- 100 GB is default -->
                    <amq:storeUsage limit="${berichtencentrale.store.usage:2 gb}"/>
                </amq:storeUsage>
                <amq:tempUsage>
                    <!--TempUsage is the maximum size of the store used for non-persistent messages
                    that may optionally overflow from memory awaiting dispatch -->
                    <!-- Aangezien alles persistent is volstaat 2 GB -->
                    <amq:tempUsage limit="${berichtencentrale.temp.usage:2 gb}"/>
                </amq:tempUsage>
            </amq:systemUsage>
        </amq:systemUsage>

        <!-- destroy the spring context on shutdown -->
        <amq:shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans"
                  class="org.apache.activemq.hooks.SpringContextHook"/>
        </amq:shutdownHooks>

		<amq:plugins>
            <!-- Redelivery is noodzakelijk voor GBA componenten -->
            <amq:redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
                <amq:redeliveryPolicyMap>
                    <amq:redeliveryPolicyMap>
                        <amq:defaultEntry>
                            <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
                                <property name="maximumRedeliveries" value="${berichtencentrale.redelivery.maximum:5}" />
                                <!--
                                <property name="initialRedeliveryDelay" value="${routering.activemq.redelivery.initial.delay:300000}" />
                                <property name="redeliveryDelay" value="${routering.activemq.redelivery.delay:3600000}" />
                                -->
                                <property name="initialRedeliveryDelay" value="${berichtencentrale.redelivery.initial.delay:1000}" />
                                <property name="redeliveryDelay" value="${berichtencentrale.redelivery.delay:1000}" />
                            </bean>
                        </amq:defaultEntry>
                    </amq:redeliveryPolicyMap>
                </amq:redeliveryPolicyMap>
            </amq:redeliveryPlugin>
		</amq:plugins>
    </amq:broker>

</beans>
